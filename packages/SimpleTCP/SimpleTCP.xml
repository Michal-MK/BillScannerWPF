<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleTCP</name>
    </assembly>
    <members>
        <member name="T:Igor.TCP.ClientToServerConnection">
            <summary>
            Client to server connection holder, processes higher level data
            </summary>
        </member>
        <member name="M:Igor.TCP.ClientToServerConnection.DisconnectFromServer(System.Byte)">
            <summary>
            Disconnect and let server know that this client is disconnecting
            </summary>
        </member>
        <member name="M:Igor.TCP.ClientToServerConnection.HigherLevelDataReceived(Igor.TCP.ReceivedData)">
            <summary>
            Handle higher level data that only a Client can react to
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Igor.TCP.RequestHandler">
            <summary>
            Class handing requests from the other side
            </summary>
        </member>
        <member name="M:Igor.TCP.RequestHandler.GetResponseType(System.Byte)">
            <summary>
            Get response type of custom defined packet 'ID'
            </summary>
        </member>
        <member name="T:Igor.TCP.OnPropertySynchronizationEventArgs">
            <summary>
            Event args holding basic information about an ongoing synchronization of a property
            </summary>
        </member>
        <member name="P:Igor.TCP.OnPropertySynchronizationEventArgs.syncID">
            <summary>
            The ID of the synchronization packet
            </summary>
        </member>
        <member name="P:Igor.TCP.OnPropertySynchronizationEventArgs.propertyName">
            <summary>
            The name of the property that was synchronized
            </summary>
        </member>
        <member name="P:Igor.TCP.OnPropertySynchronizationEventArgs.instance">
            <summary>
            Instance of the object that the property belongs to, <see langword="null"/> if the property is static
            </summary>
        </member>
        <member name="T:Igor.TCP.PacketIDTakenException">
            <summary>
            Exception signifying that the packetID is already taken
            </summary>
        </member>
        <member name="M:Igor.TCP.PacketIDTakenException.#ctor(System.Byte,System.Type,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Igor.TCP.PacketIDTakenException.packetID">
            <summary>
            The ID that was attempted to register
            </summary>
        </member>
        <member name="P:Igor.TCP.PacketIDTakenException.packetDataType">
            <summary>
            The type of data that is already registered
            </summary>
        </member>
        <member name="T:Igor.TCP.Enums.DisconnectType">
            <summary>
            Reasons for the disconnect
            </summary>
        </member>
        <member name="F:Igor.TCP.Enums.DisconnectType.Success">
            <summary>
            Client disconnected successfully
            </summary>
        </member>
        <member name="F:Igor.TCP.Enums.DisconnectType.Interrupted">
            <summary>
            Client dropped connection to the server
            </summary>
        </member>
        <member name="F:Igor.TCP.Enums.DisconnectType.Kicked">
            <summary>
            Client disconnected by server (kicked)
            </summary>
        </member>
        <member name="T:Igor.TCP.CustomPacket">
            <summary>
            Class representing a single packet definition
            </summary>
        </member>
        <member name="P:Igor.TCP.CustomPacket.packetID">
            <summary>
            The ID of the packet
            </summary>
        </member>
        <member name="P:Igor.TCP.CustomPacket.dataType">
            <summary>
            Type of the data this packet carries
            </summary>
        </member>
        <member name="P:Igor.TCP.CustomPacket.action">
            <summary>
            Callback action to receive the selected object
            </summary>
        </member>
        <member name="M:Igor.TCP.CustomPacket.#ctor(System.Byte,System.Type,System.Action{System.Byte,System.Object})">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:Igor.TCP.ClientConnectedEventArgs">
            <summary>
            OnConnectionReceived event arguments
            </summary>
        </member>
        <member name="P:Igor.TCP.ClientConnectedEventArgs.myServer">
            <summary>
            Reference to the server that accepted this connection
            </summary>
        </member>
        <member name="P:Igor.TCP.ClientConnectedEventArgs.clientInfo">
            <summary>
            Basic Information about client
            </summary>
        </member>
        <member name="T:Igor.TCP.ClientDisconnectedEventArgs">
            <summary>
            Client Disconnected event data
            </summary>
        </member>
        <member name="P:Igor.TCP.ClientDisconnectedEventArgs.clientID">
            <summary>
            ID of the disconnected client
            </summary>
        </member>
        <member name="P:Igor.TCP.ClientDisconnectedEventArgs.disconnectType">
            <summary>
            The way client disconnected
            </summary>
        </member>
        <member name="T:Igor.TCP.ConnectionData">
            <summary>
            Holds IP address and port for connection
            </summary>
        </member>
        <member name="P:Igor.TCP.ConnectionData.ipAddress">
            <summary>
            IP address to connect to
            </summary>
        </member>
        <member name="P:Igor.TCP.ConnectionData.port">
            <summary>
            Port to which to listen
            </summary>
        </member>
        <member name="M:Igor.TCP.ConnectionData.#ctor(System.String,System.UInt16)">
            <summary>
            Initialize new ConnectionData, used for connecting to the server
            </summary>
        </member>
        <member name="T:Igor.TCP.DataIDs">
            <summary>
            Class holding packet IDs and received data resolution and unpacking
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.StringID">
            <summary>
            Packet ID for string
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.Int64ID">
            <summary>
            Packet ID for Int64 (long)
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.RequestReceptionID">
            <summary>
            Packet ID for handling requests
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.ResponseReceptionID">
            <summary>
            Packet ID for handling responses to requests
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.PropertySyncID">
            <summary>
            Packet ID for handling property synchronization
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.ClientInformationID">
            <summary>
            Packet ID for sending client information to the other side
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.ClientDisconnected">
            <summary>
            Packet ID to signalize client disconnect
            </summary>
        </member>
        <member name="M:Igor.TCP.DataIDs.IndetifyID(System.Byte,System.Byte,System.Byte[])">
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:Igor.TCP.UndefinedPacketException"></exception>
        </member>
        <member name="M:Igor.TCP.DataIDs.IsIDReserved(System.Byte,System.Type@,System.String@)">
            <summary>
            Helper to find whether the ID is already taken by something
            </summary>
        </member>
        <member name="T:Igor.TCP.DataReroutedEventArgs">
            <summary>
            Basic rerouting information
            </summary>
        </member>
        <member name="P:Igor.TCP.DataReroutedEventArgs.forwardedClient">
            <summary>
            The client that will receive this packet
            </summary>
        </member>
        <member name="P:Igor.TCP.DataReroutedEventArgs.originClient">
            <summary>
            The client sent this packet
            </summary>
        </member>
        <member name="P:Igor.TCP.DataReroutedEventArgs.packetID">
            <summary>
            ID of the packet
            </summary>
        </member>
        <member name="T:Igor.TCP.PacketReceivedEventArgs`1">
            <summary>
            Predefined packets data holder
            </summary>
        </member>
        <member name="P:Igor.TCP.PacketReceivedEventArgs`1.data">
            <summary>
            Received data
            </summary>
        </member>
        <member name="P:Igor.TCP.PacketReceivedEventArgs`1.clientID">
            <summary>
            Packet origin
            </summary>
        </member>
        <member name="P:Igor.TCP.PropertySynchronization.packetID">
            <summary>
            ID of the property packet
            </summary>
        </member>
        <member name="P:Igor.TCP.PropertySynchronization.classInstance">
            <summary>
            Instance of the class where to modify the property
            </summary>
        </member>
        <member name="P:Igor.TCP.PropertySynchronization.property">
            <summary>
            The property to keep in sync
            </summary>
        </member>
        <member name="P:Igor.TCP.PropertySynchronization.propertyType">
            <summary>
            Wrapper to get the type of the property
            </summary>
        </member>
        <member name="P:Igor.TCP.PropertySynchronization.classInstanceType">
            <summary>
            Wrapper to get the type of the class instance
            </summary>
        </member>
        <member name="M:Igor.TCP.PropertySynchronization.#ctor(System.Byte,System.Object,System.String)">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:Igor.TCP.ReceivedData">
            <summary>
            Internal data holder that is constructed after parsing all of the bytes
            </summary>
        </member>
        <member name="P:Igor.TCP.ReceivedData.dataType">
            <summary>
            Data type of this data object
            </summary>
        </member>
        <member name="P:Igor.TCP.ReceivedData.senderID">
            <summary>
            ID of the endpoint this packet originated from
            </summary>
        </member>
        <member name="P:Igor.TCP.ReceivedData.dataID">
            <summary>
            ID of the data
            </summary>
        </member>
        <member name="P:Igor.TCP.ReceivedData.receivedObject">
            <summary>
            Received bytes converted into a generic object. Casting to <see cref="P:Igor.TCP.ReceivedData.dataType"/> is valid.
            </summary>
        </member>
        <member name="T:Igor.TCP.ReroutingInfo">
            <summary>
            Class holding data necessary for rerouting packets from client to client
            </summary>
        </member>
        <member name="F:Igor.TCP.ReroutingInfo.toClient">
            <summary>
            ID this packet is meant for
            </summary>
        </member>
        <member name="F:Igor.TCP.ReroutingInfo.packetID">
            <summary>
            ID of the packet
            </summary>
        </member>
        <member name="T:Igor.TCP.SendQueueItem">
            <summary>
            Structure to hold all necessary data to correctly send a packet to the other side
            </summary>
        </member>
        <member name="F:Igor.TCP.SendQueueItem.packetID">
            <summary>
            The ID to send this packet to
            </summary>
        </member>
        <member name="F:Igor.TCP.SendQueueItem.originClientID">
            <summary>
            The original sender of the packet
            </summary>
        </member>
        <member name="F:Igor.TCP.SendQueueItem.rawData">
            <summary>
            The actual data to send
            </summary>
        </member>
        <member name="M:Igor.TCP.SendQueueItem.#ctor(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Igor.TCP.ServerConfiguration">
            <summary>
            Server configuration class
            </summary>
        </member>
        <member name="P:Igor.TCP.ServerConfiguration.clientCanRequestFromServer">
            <summary>
            Allows clients to make requests to the server
            </summary>
        </member>
        <member name="M:Igor.TCP.ServerConfiguration.#ctor(System.Boolean)">
            <summary>
            Default constructor, select which values you want to modify, the rest is set to defaults
            </summary>
        </member>
        <member name="T:Igor.TCP.ServerToClientConnection">
            <summary>
            Server to client connection holder, processes higher level data
            </summary>
        </member>
        <member name="M:Igor.TCP.ServerToClientConnection.HigherLevelDataReceived(Igor.TCP.ReceivedData)">
            <summary>
            Handle higher level data that only server can receive and react to
            </summary>
        </member>
        <member name="M:Igor.TCP.ServerToClientConnection.DisconnectClient(System.Byte)">
            <summary>
            Send a disconnect packet to the client and stop all communication to said client
            </summary>
        </member>
        <member name="T:Igor.TCP.SimpleTCPHelper">
            <summary>
            Static class containing useful methods for data transmission
            </summary>
        </member>
        <member name="M:Igor.TCP.SimpleTCPHelper.GetActiveIPv4Address(System.Int32)">
            <summary>
            Returns active IPv4 Address of this computer
            </summary>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="M:Igor.TCP.SimpleTCPHelper.GetBytesFromObject(System.Object)">
            <summary>
            Wrapper to all object to byte[] conversions
            </summary>
        </member>
        <member name="M:Igor.TCP.SimpleTCPHelper.ConvertToUInt64(System.Byte[])">
            <summary>
            Convert numeric value of bytes to an integer, lower index >> less important byte
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPClient">
            <summary>
            Client that can connect to a TCPServer
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClient.clientInfo">
            <summary>
            Information about this client
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClient.getConnection">
            <summary>
            Get connection to the server, allows client to server communication, holds send and receive functionality
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClient.debugPrints">
            <summary>
            Log debug information into the console
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPClient.OnPropertySynchronized">
            <summary>
            Event called whenever a synchronization packet is received
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.#ctor(System.String,System.UInt16)">
            <summary>
            Initialize new TCPClient by connecting to 'ipAddress' on port 'port'
            </summary>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPClient.#ctor(System.Net.IPAddress,System.UInt16)">
            <summary>
            Initialize new TCPClient by connecting to 'ipAddress' on port 'port'
            </summary>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPClient.#ctor(Igor.TCP.ConnectionData)">
            <summary>
            Initialize new TCPClient by connecting to a server defined in 'data'
            </summary>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPClient.Connect(System.Action)">
            <summary>
            Connect to server with specified IP and port
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.SetUpClientInfo(System.String)">
            <summary>
            Quick setup of client meta-data
            </summary>
            <param name="clientName">If left empty Current user name is used</param>
        </member>
        <member name="P:Igor.TCP.TCPClient.isListeningForData">
            <summary>
            Set listening for incoming data from connected client 'clientID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.SyncProperty(System.Object,System.String,System.Byte)">
            <summary>
            Define 'propID' for synchronization of public property named 'propetyName' from instance of a class 'instance' 
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.ProvideValue``1(System.Byte,System.Func{``0})">
            <summary>
            Provide a value to all connected clients
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.GetValue``1(System.Byte)">
            <summary>
            Request a value from a client
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.DefineCustomPacket``1(System.Byte,System.Action{System.Byte,``0})">
            <summary>
            Register custom packet with ID that will carry a TData type, delivered via the callback
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.Disconnect">
            <summary>
            Disconnect from current server and dispose of this client
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="T:Igor.TCP.TCPClientInfo">
            <summary>
            Basic information about this client, can be sent to sever
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClientInfo.isServer">
            <summary>
            Is current client playing the role of the server
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClientInfo.clientAddress">
            <summary>
            Address of current instance
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClientInfo.computerName">
            <summary>
            The name of connected client, if not set up users computer name is used.
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClientInfo.clientID">
            <summary>
            The ID assigned from server<para>Value 255 is invalid/not yet assigned!</para> 
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClientInfo.#ctor(System.String,System.Boolean,System.Net.IPAddress)">
            <summary>
            Initialize new <see cref="T:Igor.TCP.TCPClientInfo"/>
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPConnection">
            <summary>
            Base class for all client and server
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.listeningForData">
            <summary>
            Is client listening for incoming data
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.sendingData">
            <summary>
            Is client actively trying to send data
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.debugPrints">
            <summary>
            Print debug information to console
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPConnection.OnStringReceived">
            <summary>
            Called when successfully received data by <see cref="F:Igor.TCP.DataIDs.StringID"></see> marked packet
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPConnection.OnInt64Received">
            <summary>
            Called when successfully received data by <see cref="F:Igor.TCP.DataIDs.Int64ID"></see> marked packet
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.responseGenerator">
            <summary>
            Access to data types for custom packets
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.String)">
            <summary>
            Send UTF-8 encoded string to connected device
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Int64)">
            <summary>
            Send Int64 (long) to connected device
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Byte,System.Byte)">
            <summary>
            Send a single byte to the connected device
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Main Send function, send byte[] of 'data' with packet ID 'packetID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Byte,System.Byte[])">
            <summary>
            Send user defined byte[] 'data' under 'packetID'
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData``1(System.Byte,``0)">
            <summary>
            Send custom data type using internal serialization/deserialization mechanisms
            </summary>
            <exception cref="T:Igor.TCP.UndefinedPacketException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendDataImmediate(System.Byte,System.Byte[])">
            <summary>
            Send data immediately on current thread, generally unsafe and should be avoided if possible
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.HigherLevelDataReceived(Igor.TCP.ReceivedData)">
            <summary>
            Override in specific connection to handle higher level data
            </summary>
            <param name="data">The data received</param>
        </member>
        <member name="M:Igor.TCP.TCPConnection.Dispose(System.Boolean)">
            <summary>
            Dispose of the object
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.Dispose">
            <summary>
            Dispose of the object
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPResponse">
            <summary>
            Class containing response data to raised request
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPResponse.#ctor(System.Byte,System.Byte[],System.Type)">
            <summary>
            Create new response for 'packetID' containing 'rawData'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPResponse.#ctor(System.Byte,System.Type)">
            <summary>
            Create new response for 'packetID' with no  data
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPResponse.rawData">
            <summary>
            Raw byte[] data from the other side, holds requested information
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPResponse.packetID">
            <summary>
            Represents user defined ID for data reception
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPResponse.dataType">
            <summary>
            The type of data this packet carries
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPResponse.getObject">
            <summary>
            Attempts conversion to requested type, will fail if the object's name-space differs between Assemblies!
            <para>It is advised to create your own byte[] to object converter</para>
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPServer">
            <summary>
            TCP Server instance. Accepts client connections
            </summary>
        </member>
        <member name="F:Igor.TCP.TCPServer.ServerPacketOriginID">
            <summary>
            Client ID used by packets that come from the server
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPServer.serverConfiguration">
            <summary>
            Configuration of this server
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPServer.OnClientConnected">
            <summary>
            Called when client connects to this server
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPServer.OnClientDisconnected">
            <summary>
            Called when client disconnects from this server
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPServer.OnDataRerouted">
            <summary>
            Called when server reroutes data
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPServer.OnServerStarted">
            <summary>
            Called when the server successfully starts
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.#ctor(Igor.TCP.ServerConfiguration)">
            <summary>
            Create new <see cref="T:Igor.TCP.TCPServer"/>
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.Start(System.UInt16)">
            <summary>
            Start server using specified 'port' and internally found IP
            </summary>
            <exception cref="T:Igor.TCP.ServerStartException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.Start(System.String,System.UInt16)">
            <summary>
            Start server using specified 'port' and explicitly specified 'ipAddress'
            </summary>
            <exception cref="T:Igor.TCP.ServerStartException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.Start(System.Net.IPAddress,System.UInt16)">
            <summary>
            Start server using specified 'port' and explicitly specified 'ipAddress'
            </summary>
            <exception cref="T:Igor.TCP.ServerStartException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.StartServer(System.Net.IPAddress,System.UInt16)">
            <summary>
            Actual server starting function
            </summary>
            <exception cref="T:Igor.TCP.ServerStartException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.Stop">
            <summary>
            Stops the server
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.GetConnection(System.Byte)">
            <summary>
            Get client connection by ID, NPE if client id is not found/connected
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.GetConnection(System.Net.IPAddress)">
            <summary>
            Get client connection by IP address
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:Igor.TCP.TCPServer.getConnectedClients">
            <summary>
            Get all connected clients
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.SetListeningForData(System.Byte,System.Boolean)">
            <summary>
            Set listening for incoming data from connected client 'clientID'
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:Igor.TCP.TCPServer.isListeningForClients">
            <summary>
            Set listening for incoming client connection attempts
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.SyncProperty(System.Byte,System.Object,System.String,System.Byte)">
            <summary>
            Define 'propID' for synchronization of public property for client 'clientID' named 'propetyName' from instance of a class 'instance', publish changes by calling UpdateProp()
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.UpdateProp(System.Byte,System.Byte,System.Object)">
            <summary>
            Sends updated property value to connected 'clientID' with property id 'ID' and set value;
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.ProvideValue``1(System.Byte,System.Func{``0})">
            <summary>
            Provide a value to all connected clients
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.ProvideValue``1(System.Byte,System.Byte,System.Func{``0})">
            <summary>
            Provide a value to a selected client
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.GetValue``1(System.Byte,System.Byte)">
            <summary>
            Request a value from a client
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.DefineRerouteID(System.Byte,System.Byte,System.Byte)">
            <summary>
            Define rerouting of all packets from 'fromClient' coming to this server to under 'packetID' to be sent to 'toClient'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.DefineCustomPacket``1(System.Byte,System.Byte,System.Action{System.Byte,``0})">
            <summary>
            Register custom packet with ID that will carry a TData type, delivered via the callback
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.SendToAll``1(System.Byte,``0)">
            <summary>
            Send 'data' to all connected clients.
            </summary>
            <exception cref="T:Igor.TCP.UndefinedPacketException"></exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
        </member>
        <member name="M:Igor.TCP.TCPServer.SendToAll(System.String)">
            <summary>
            Send string to all connected clients.
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.SendToAll(System.Int64)">
            <summary>
            Send Int64 to all connected clients.
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.Dispose(System.Boolean)">
            <summary>
            Dispose of the object
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.Dispose">
            <summary>
            Dispose of the object
            </summary>
        </member>
    </members>
</doc>
